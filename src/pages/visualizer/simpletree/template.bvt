svg {
	Container {
		Tree{
			x = maxTextLength + 100; y = maxTextLength + 100
			width = treeHeight/2;height = treeHeight/2
        	direction = "radical"
			data = treedata
			:leaf(d){
				Circle.centered {
					@let radius = 3 + (d.leaf.data.length - minLeafNodesLength) * (maxRadius-4) / (maxLeafNodesLength - minLeafNodesLength)
					r = radius
					fill = '#8fc8f5'
					behavior:tooltip {
                        content = (`Name: ${d.leaf.data.name}<br>Length: ${d.leaf.data.length}`)
                    }
				}
				Container {
					@let isRH = d.tree.isRightHalf(d.leaf.x)
					Text {
						anchor = d.tree.leafAnchor(d.leaf)
						x = isRH? 25: -25
						text = d.leaf.data.name.replace(/_/g,' ')
						fill = '#8d9db6'
						fontSize = 10
						behavior:tooltip {
                        	content = (`Name: ${d.leaf.data.name}<br>Length: ${d.leaf.data.length}`)
                    	}
					}
					
				}

			}
		}
		Container {
			x = 40
			Text{
				x = -7;y = -2
				text = 'Distance to Parent'
				style:font-weight = "bold"
				fontSize = 16
			}
			Circle.centered {
				y = 25
				r = maxRadius - 1
				fill = 'black'
			}
			Text {
				x = 20; y = 20
				text = maxLeafNodesLength
			}
			Circle.centered {
				y = 55
				r = 3
				fill = 'black'
			}
			Text {
				x = 20; y = 49
				text = minLeafNodesLength
			}
		}
	}
}